# Introduction:
# ---------------------
# The `file_search_lib.sh` is a reusable shell script library designed to search for files
# within a specified directory based on criteria such as file type, prefix, and suffix patterns.
# It supports recursive search and allows executing custom commands on each file found.
# This library can be sourced in other scripts to enhance them with flexible file searching capabilities.

# Usage:
# ---------------------
# To use the `search_files` function from this library, include the following steps in your script:
#
# 1. Source the library to incorporate its functionality:
#    source /path/to/file_search_lib.sh
#
# 2. Call the `search_files` function with desired options:
#
#    search_files -d <directory> -t <type> -p <prefix> -s <suffix> -e <command> -r
#
#   Options:
#   - `-d <directory>`: Specify the directory to search in (default is the current directory).
#   - `-t <type>`: Filter by file type or extension (e.g., txt, jpg). Optional.
#   - `-p <prefix>`: Use a regex pattern to filter by file name prefix. Optional.
#   - `-s <suffix>`: Use a regex pattern to filter by file name suffix. Optional.
#   - `-e <command>`: Execute a specified command on each file found. Use '{}' to denote file names in the command. Optional.
#   - `-r`: Enable recursive search to include subdirectories. Optional.
#   - `-h`: Display help information for the `search_files` function.
# Function to search files

search_files() {
  local directory="."
  local type=""
  local prefix=""
  local suffix=""
  local execute_command=""
  local recursive=false

  # Parse command-line options for the function
  while getopts "d:t:p:s:e:rh" opt; do
    case $opt in
      d)
        directory=$OPTARG
        ;;
      t)
        type=$OPTARG
        ;;
      p)
        prefix=$OPTARG
        ;;
      s)
        suffix=$OPTARG
        ;;
      e)
        execute_command=$OPTARG
        ;;
      r)
        recursive=true
        ;;
      h)
        usage
        return
        ;;
      *)
        usage
        return
        ;;
    esac
  done

  # Construct the regex pattern for filtering
  local regex_pattern="^${prefix}.*${suffix}"
  if [ -n "$type" ]; then
    regex_pattern="${regex_pattern}\.${type}$"
  fi

  # Find files, optionally recursive
  local files
  if [ "$recursive" = true ]; then
    files=$(find "$directory" -type f | sed 's|^\./||' | grep -E "$regex_pattern")
  else
    files=$(find "$directory" -maxdepth 1 -type f | sed 's|^\./||' | grep -E "$regex_pattern")
  fi

  # Perform the specified action on the results
  for file in $files; do
    if [[ -n $execute_command ]]; then
      # Replace '{}' with the current file name in the command
      eval ${execute_command//\{\}/"$file"}
    else
      echo "$file"
    fi
  done
}

# Usage message
usage() {
  echo "Usage: search_files [-d directory] [-t type] [-p prefix] [-s suffix] [-e command] [-r] [-h]"
  echo "  -d directory : The directory to search in (default is current directory)"
  echo "  -t type      : The file type/extension to search for (e.g., txt, jpg) (optional)"
  echo "  -p prefix    : The regex pattern for the prefix of the file name (optional)"
  echo "  -s suffix    : The regex pattern for the suffix of the file name (optional)"
  echo "  -e command   : The command to execute on each file found (optional)"
  echo "  -r           : Enable recursive search (search subdirectories)"
  echo "  -h           : Display this help message"
}