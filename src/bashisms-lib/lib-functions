#!/bin/bash
# shellcheck disable=SC2317  # Don't warn about unreachable commands in this function
export LIB_FUNCTIONS_VERSION=1

## (C) 2024
## Ramon Brooker <rbrooker@aeo3.io>

function note-addition {
    timestamp=$(date +"%a %b %d %Y - %X")
    echo "${1} -- ${timestamp}" >>/etc/bash.bashrc.d/added
}

function stub-script1 {

    if [[ ${1} = '' ]]; then
        echo "this function requires a name as a parameter"
        echo "$ stub-script myscript "
    else
        SCRIPTNAME="${1}.sh"
        if ! touch "${SCRIPTNAME}" ; then 
            echo "**   you cannot write to this directory, try some place else   **"
        else 
            cat >"${SCRIPTNAME}" <<EOF
$(printf '%s' "$SCRIPT_SIGNATURE_BLOCK")

## Generated Script Template
echo "now running ${1}"

# your script goes here


exit $?

EOF
            chmod +x "${SCRIPTNAME}"
        fi
    fi  
}

### Inspired by Microsoft's Defender Installation Script
#[DOC] Detects the distro, version, family, package manager
function ddistro {
    local INDEX=${1}
    if [[ ${INDEX} -gt 3 ]]; then
        cat <<EOF
    detect_distro only takes 0-4
    0 - distro
    1 - version
    2 - distro family
    3 - Package Manager
        no param default 3

    $ detect_distro 2
    debian
EOF
        return 1
    elif [[ -z ${INDEX} ]]; then
        INDEX=3
    fi

    if [ -f /etc/os-release ]; then
        . /etc/os-release
    elif [ -f /etc/oracle-release ]; then
        . /etc/oracle-release 
    elif [ -f /etc/redhat-release ]; then
        . /etc/redhat-release       
    else
        echo "unable to detect distro"
        return 1
    fi
    DISTRO=$ID
    VERSION=${VERSION_ID}
    VERSION_NAME=${VERSION_CODENAME}
    case "${DISTRO}" in 
        *debian* | *ubuntu* | *mint* )
                DISTRO_FAMILY="debian"
                PACKAGE_MANAGER="apt-get"
                ;;
        *rhel* | *centos* | *ol* | *oracle* | *fedora* | *rocky* |*amzn* )
                DISTRO_FAMILY="fedora"
                PACKAGE_MANAGER="yum"
                ;;
        *suse* )
                DISTRO_FAMILY="suse"
                PACKAGE_MANAGER="zypper"
                ;;
        *)
                echo "unsupported distro ${DISTRO} ${VERSION}"
                return 1
                ;;
    esac
    declare -a DISTRO_DETAILS=("${DISTRO}" "${VERSION}" "${DISTRO_FAMILY}" "${PACKAGE_MANAGER}" "${VERSION_NAME}")
    echo "${DISTRO_DETAILS[${INDEX}]}"
}

#[DOC] Used to programmically check if a user is a member of a group
function group-check {

    if [[ ${1} = '' ]]; then
        echo "this function requires a name as a parameter"
        echo "$ group-check group-name "
    else
        if [[ $(groups) =~ ${1} ]]; then
            # echo "its there! "
            echo "true"
        else
            # echo "you are not a member of this group; speak to the admin for access"
            echo "false"
        fi
    fi
}

## not sure where it will be installed
declare -a optional_paths 
export optional_paths=("/usr/local/bin" "/usr/bin" "/usr/local/sbin" "/usr/sbin" "${HOME}/.local/bin" "${HOME}/.bin" )

 function  app_is_there  {
    app=${1}
    for path in "${optional_paths[@]}"; do
        if [[ -x ${path}/${app} ]]; then
            return 0
        fi
    done
    return 1
 }

function app_values {
    app=${1}
    app_is_there "${app}" && echo $?
}

function find-latency {
    ## takes an array of addresses and lists them out in terms of shotest to longest latency
    declare -a NAMES
    NAMES=("${1}")

    for n in "${NAMES[@]}"
    do 
        LATENCY_TIME=$(ping -c5 -U  $n  | grep time=  | awk '{print $7}' | sed s/time=// | sort -r )
        echo "${LATENCY_TIME} | $n  " >> temp
    done 
    cat temp | grep '|' | sort 
    rm temp
}